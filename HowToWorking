------------------------------------- OPENFLOW: -------------------------------------

ovs-ofctl add-flow tcp:192.168.2.254:6634 ip,idle_timeout=0,nw_dst=192.168.7.4,actions=output:20
ovs-ofctl add-flow tcp:192.168.2.254:6634 ip,idle_timeout=0,nw_dst=192.168.7.5,actions=output:15
ovs-ofctl add-flow tcp:192.168.2.254:6634 ip,idle_timeout=0,nw_dst=192.168.7.21,actions=output:11
ovs-ofctl add-flow tcp:192.168.2.254:6634 ip,idle_timeout=0,nw_dst=192.168.7.100,actions=output:3,7,9
ovs-ofctl add-flow tcp:192.168.2.254:6634 arp,idle_timeout=0,actions=NORMAL

ovs-ofctl add-flow tcp:192.168.2.254:6634 ip,idle_timeout=0,nw_dst=192.168.7.100,actions=output:3,5,9

S3
00:1b:21:54:37:21
S5
00:1b:21:54:37:fd
s9
00:1b:21:54:2b:01 


R4 -> iface: eth0 -> port 20 no switch
R5 -> iface: eth1 -> port 15 no switch

-- No Switch:
config
vlan 7 openflow listener ptcp:6634 enable
vlan 7 untagged 1-12

------------------------------------- Configs: -------------------------------------

run httpd:
apt-get install libaprutil1-dev


dropper:
sudo apt-get install libnetfilter-queue-dev

------------------------------------- 1. VM's: -------------------------------------
----------- or ------------------------ HUB  ---------------------------------------

sudo -s

Tomcat Servers:
sh ./tomcat/bin/catalina.sh start

HTTP Servers (VMS, same IP, same MAC):
./httpd/bin -k start
iptables -t raw -A PREROUTING -p tcp --dport 5555 -j NFQUEUE --queue-num 1
iptables -A OUTPUT -p tcp --dport 8080 --tcp-flags RST RST -j DROP
gcc -Wall -o dropper dropper.c -lnfnetlink -lnetfilter_queue
./dropper

------------------------------------- 2. HUB: -------------------------------------

sudo -s

Tomcat Servers:
sh ./tomcat/bin/catalina.sh start
iptables -t mangle -A POSTROUTING -p tcp --sport 8080 -j NFQUEUE --queue-num 1
python q.py

LB Servers:
iptables -A INPUT -p tcp --dport 5555 -j DROP
iptables -A OUTPUT -p tcp --dport 8080 --tcp-flags RST RST -j DROP
python snifflb.py


-------------------------------- 3. Multicast Loop: --------------------------------

Tomcat Servers:
sh ./tomcat/bin/catalina.sh start

LB Servers:
route add -net 192.168.1.0/25 gw 10.101.233.104
iptables -t raw -A PREROUTING -p tcp --dport 5555 -j NFQUEUE --queue-num 1
./httpd/bin/httpd -k start
gcc -Wall -o dropper dropper.c -lnfnetlink -lnetfilter_queue
./dropper

Router:
ifconfig eth0:1 192.168.1.2 netmask 255.255.255.128
iptables -t raw -A PREROUTING -p tcp --dport 12345 -j NFQUEUE --queue-num 1
iptables -A OUTPUT -p tcp --sport 12345 --tcp-flags RST RST -j DROP
python forwarder6.py

Client:
#Simulate other network
ifconfig eth0:1 192.168.1.3 netmask 255.255.255.128
ifconfig eth0:1 -arp
ip link set dev eth0:1 arp off

-------------------------------- 3.a Multicast Loop: --------------------------------

Tomcat Servers (10.10.5.126, 10.10.5.221):
sh ./tomcat/bin/catalina.sh start

Router (10.10.5.201):
iptables -A OUTPUT -p tcp --sport 5555 --tcp-flags RST RST -j DROP
gcc -Wall -o forwarder forwarder.c
./forwarder

LB Servers (10.10.5.153, 10.10.5.172):
./httpd/bin/httpd -k start
iptables -t raw -A PREROUTING -p tcp --dport 5555 -j NFQUEUE --queue-num 1
iptables -t mangle -A POSTROUTING -p tcp --sport 5555 -j NFQUEUE --queue-num 1
gcc -Wall -o dropmask dropmask.c -lnfnetlink -lnetfilter_queue
./dropmask

------------------------------ 4. Forwarder IPTABLES: ------------------------------ 

apt-get install nfqueue-bindings-python
apt-get install python-scapy

Tomcat Servers:
sh ./tomcat/bin/catalina.sh start
iptables -t mangle -A POSTROUTING -p tcp --sport 8080 -j NFQUEUE --queue-num 1
python q.py

LB Servers:
iptables -t raw -A PREROUTING -p tcp --dport 5555 -j NFQUEUE --queue-num 1
python lb.py

Forwarder:
sysctl -e net.ipv4.ip_forward=1
iptables -t nat -A PREROUTING -p tcp --dport 12345 -j DNAT --to 10.101.233.200:5555
iptables -t nat -A POSTROUTING -p tcp -d 10.101.233.200 --dport 5555 -j MASQUERADE
arp -s 10.101.233.200 ff:ff:ff:ff:ff:ff

------------------------------ 4.a Forwarder IPTABLES: ------------------------------ 

Tomcat Servers (10.10.5.126, 10.10.5.221):
sh ./tomcat/bin/catalina.sh start
iptables -t mangle -A POSTROUTING -p tcp --sport 8080 -j NFQUEUE --queue-num 0
gcc -Wall -o mask mask.c -lnfnetlink -lnetfilter_queue
./mask

Forwarder (10.10.5.201):
sysctl -e net.ipv4.ip_forward=1
iptables -t nat -A PREROUTING -p tcp --dport 5555 -j DNAT --to 10.10.5.100:5555
iptables -t nat -A POSTROUTING -p tcp -d 10.10.5.100 --dport 5555 -j MASQUERADE
arp -s 10.10.5.100 ff:ff:ff:ff:ff:ff

# iptables -t nat -A PREROUTING -p tcp --dport 5555 -j DNAT --to 192.168.2.100:5555


LB Servers (10.10.5.153, 10.10.5.172):
ifconfig eth0:1 10.10.5.100 netmask 255.255.255.0

a1: ################## NOT WORKING #########################
iptables -t raw -A PREROUTING -p tcp --dport 5555 -j NFQUEUE --queue-num 1
gcc -Wall -o lbIPT lbIPT.c -lnfnetlink -lnetfilter_queue
./lbIPT

a2:
iptables -A OUTPUT -p tcp --sport 5555 --tcp-flags RST RST -j DROP
gcc -Wall -o lbSNIF lbSNIF.c
./lbSNIF

------------------------------ 4.b Forwarder IPTABLES: ------------------------------ 

Tomcat Servers (10.10.5.126, 10.10.5.221):
sh ./tomcat/bin/catalina.sh start

Forwarder (10.10.5.201):
sysctl -e net.ipv4.ip_forward=1
iptables -t nat -A PREROUTING -p tcp --dport 5555 -j DNAT --to 10.10.5.100:5555
iptables -t nat -A POSTROUTING -p tcp -d 10.10.5.100 --dport 5555 -j MASQUERADE
arp -s 10.10.5.100 ff:ff:ff:ff:ff:ff

LB Servers (10.10.5.153, 10.10.5.172):
ifconfig eth0:1 10.10.5.100 netmask 255.255.255.0
iptables -t raw -A PREROUTING -p tcp --dport 5555 -d 10.10.5.100 -j NFQUEUE --queue-num 1
iptables -t mangle -A POSTROUTING -p tcp --sport 5555 -j NFQUEUE --queue-num 1
gcc -Wall -O3 -o dropSendMask dropSendMask.c -lnfnetlink -lnetfilter_queue
./dropSendMask

----------------------------------------- Stuffs -------------------------------------

Clear iptables:
iptables -F -t nat
iptables -F -t mangle
iptables -F -t raw
iptables -F

Clear route:

route del -net 10.101.233.161 netmask 255.255.255.255 gw 10.101.233.104
route del -net 192.168.1.0 netmask 255.255.255.0 gw 10.101.233.104

Default Gateway:
route add default gw 10.101.233.104

Delete arp:
ifconfig eth0:1 192.168.1.1 netmask 255.255.255.128
arp -d 192.168.1.3
ifconfig eth0:1 down


ifconfig eth1 192.168.7.100 netmask 255.255.255.0

